theory InflLemma
  imports StateEnv WTLemma
begin
  
definition infl_use_env where
  "infl_use_env r_s r_x = (\<lambda> x. if r_s x = OwnPerm \<and> r_x x = NoPerm then OwnPerm else NoPerm)"    
  
lemma infl_disj_use_env: "\<lbrakk> leq_use_env r_ex r_x \<rbrakk> \<Longrightarrow> disj_use_env r_ex (infl_use_env r_s r_x)"  
  apply (simp add: leq_use_env_def)
  apply (simp add: disj_use_env_def)
  apply (simp add: infl_use_env_def)
  apply (simp add: mini_disj_use_env_def)
  apply (auto)
   apply (erule_tac x="x" in allE)
   apply (auto)
  apply (erule_tac x="x" in allE)
  apply (case_tac "r_ex x")
    apply (auto)
  done
  
lemma self_infl_leq_use_env: "leq_use_env (infl_use_env r_s r_x) r_s"       
  apply (simp add: leq_use_env_def)
  apply (simp add: infl_use_env_def)
  done
    
lemma infl_leq_use_env: "\<lbrakk> leq_use_env r_x (diff_use_env r_s r_ex); leq_use_env r_ex r_s \<rbrakk> \<Longrightarrow> leq_use_env (cut_use_env r_ex) (infl_use_env r_s r_x)"   
  apply (simp add: leq_use_env_def)
  apply (auto)
  apply (erule_tac x="x" in allE)
  apply (erule_tac x="x" in allE)
  apply (simp add: infl_use_env_def)
  apply (simp add: diff_use_env_def)
  apply (simp add: minus_use_env_def)
  apply (simp add: neg_use_env_def)
  apply (simp add: cut_use_env_def)
  apply (auto)
   apply (case_tac "r_ex x")
     apply (auto)
   apply (case_tac "r_s x")
     apply (auto)
  apply (case_tac "r_ex x")
    apply (auto)
  apply (case_tac "r_s x")
    apply (auto)
  apply (case_tac "r_x x")
    apply (auto)
  done 
  
lemma lhs_diff_leq_use_env: "\<lbrakk> leq_use_env (diff_use_env r_x r_ex) r_s; leq_use_env (cut_use_env r_ex) r_s \<rbrakk> \<Longrightarrow> leq_use_env r_x r_s"    
  apply (simp add: leq_use_env_def)
  apply (auto)
  apply (erule_tac x="x" in allE)
  apply (erule_tac x="x" in allE)
  apply (simp add: diff_use_env_def)
  apply (simp add: minus_use_env_def)
  apply (simp add: neg_use_env_def)
  apply (simp add: cut_use_env_def)
  apply (case_tac "r_x x")
    apply (auto)
   apply (case_tac "r_ex x")
     apply (auto)
   apply (case_tac "r_s x")
     apply (auto)
  apply (case_tac "r_ex x")
    apply (auto)   
  done

lemma dist_diff_leq_use_env_cut: "\<lbrakk> leq_use_env r_x r_s; leq_use_env (cut_use_env r_exb) r_exa \<rbrakk> \<Longrightarrow> leq_use_env (diff_use_env r_x r_exa) (diff_use_env r_s r_exb)"
  apply (simp add: leq_use_env_def)
  apply (auto)
  apply (erule_tac x="x" in allE)
  apply (erule_tac x="x" in allE)
  apply (simp add: diff_use_env_def)
  apply (simp add: minus_use_env_def)
  apply (simp add: neg_use_env_def)
  apply (simp add: cut_use_env_def)
  apply (case_tac "r_x x")
    apply (auto)
   apply (case_tac "r_exa x")
     apply (auto)
    apply (case_tac "r_exb x")
      apply (auto)
     apply (case_tac "r_s x")
       apply (auto)
    apply (case_tac "r_s x")
      apply (auto)
   apply (case_tac "r_exb x")
     apply (auto)
    apply (case_tac "r_s x")
      apply (auto)
   apply (case_tac "r_s x")
     apply (auto)
  apply (case_tac "r_s x")
    apply (auto)
  apply (case_tac "r_exa x")
    apply (auto)
   apply (case_tac "r_exb x")
     apply (auto)
  apply (case_tac "r_exb x")
    apply (auto)
  done
  
  (*
    - sample ideal flow of inequalities for infl_use_env
    leq_use_env (req_use_env x1a tau) (comp_use_env rx (infl_use_env r_s1 r_s2))
    leq_use_env (diff_use_env (req_use_env x1a tau) (infl_use_env r_s1 r_s2)) rx
    leq_use_env (diff_use_env (req_use_env x1a tau) (infl_use_env r_s1 r_s2)) (diff_use_env (req_use_env x1a tau) (comp_use_env (req_use_env x1a tau) r_ex))
      -- fails at this step --
    leq_use_env (comp_use_env (req_use_env x1a tau) r_ex) (infl_use_env r_s1 r_s2)
    leq_use_env r_s2 (diff_use_env r_s1 (comp_use_env (req_use_env x1a tau) r_ex))
  *)

  
lemma dist_infl_leq_use_envr: "\<lbrakk> leq_use_env r_xb r_xa \<rbrakk> \<Longrightarrow> leq_use_env (infl_use_env r_s r_xa) (infl_use_env r_s r_xb)"    
  apply (simp add: leq_use_env_def)
  apply (auto)
  apply (erule_tac x="x" in allE)
  apply (simp add: infl_use_env_def)
  apply (auto)  
  apply (case_tac "r_xb x")
    apply (auto)
  done

lemma dist_infl_leq_use_env: "\<lbrakk> leq_use_env r_sb r_sa; leq_use_env r_xb r_xa \<rbrakk> \<Longrightarrow> leq_use_env (infl_use_env r_sb r_xa) (infl_use_env r_sa r_xb)"     
  apply (simp add: leq_use_env_def)
  apply (auto)
  apply (erule_tac x="x" in allE)
  apply (erule_tac x="x" in allE)
  apply (simp add: infl_use_env_def)
  apply (auto)
   apply (case_tac "r_sa x")
     apply (auto)
  apply (case_tac "r_xb x")
    apply (auto)
  done  
  
lemma msum_diff_comp_use_env: "\<lbrakk> leq_use_env r_x r_s \<rbrakk> \<Longrightarrow> comp_use_env r_x (diff_use_env r_s r_x) = r_s" 
  apply (case_tac "\<forall> x. comp_use_env r_x (diff_use_env r_s r_x) x = r_s x")
   apply (auto)
  apply (simp add: diff_use_env_def)
  apply (simp add: minus_use_env_def)
  apply (simp add: neg_use_env_def)
  apply (simp add: comp_use_env_def)
  apply (simp add: leq_use_env_def)
  apply (erule_tac x="x" in allE)
  apply (case_tac "r_s x")
    apply (auto)
    apply (case_tac "r_x x")
      apply (auto)
   apply (case_tac "r_x x")
     apply (auto)
  apply (case_tac "r_x x")
    apply (auto)
  done  
  
lemma infl_sexp_wp: "\<lbrakk> well_typed env r_s1 e tau r_s2 rx; is_sexp e \<rbrakk> \<Longrightarrow> well_typed env (comp_use_env rx (infl_use_env r_s1 r_s2)) e tau
  (comp_use_env rx (infl_use_env r_s1 r_s2)) (comp_use_env rx (infl_use_env r_s1 r_s2))"
  apply (induct e arbitrary: env r_s1 tau r_s2 rx)
       apply (auto)
    (* const + op case *)
       apply (rule_tac id_leq_use_env)
      apply (rule_tac id_leq_use_env)
    (* var case p1. *)
     apply (rule_tac st_diff_comp_leq_use_env)
     apply (rule_tac r_sb="diff_use_env (req_use_env x1a tau) (comp_use_env (req_use_env x1a tau) r_ex)" in trans_leq_use_env)
      apply (simp)
     apply (rule_tac dist_diff_leq_use_env_cut)
      apply (rule_tac id_leq_use_env)
     apply (rule_tac infl_leq_use_env)
      apply (simp)
     apply (rule_tac dist_comp_leq_use_env)
      apply (auto)
    (* var case p2. *)
    apply (rule_tac x="empty_use_env" in exI)
    apply (auto)
       apply (rule_tac rhs_weak_leq_use_env)
        apply (rule_tac dist_weak_comp_use_env)
         apply (rule_tac weak_req_use_env)
         apply (case_tac tau)
               apply (auto)
        apply (simp add: weak_use_env_def)
        apply (simp add: empty_use_env_def)
       apply (rule_tac id_leq_use_env)
      apply (rule_tac id_leq_use_env)
     apply (rule_tac leq_empty_use_env)
    apply (rule_tac r_ex="r_ex" in lhs_diff_leq_use_env)
     apply (rule_tac comp_leq_use_env1)
     apply (rule_tac lhs_fold_dcl_use_env)
     apply (rule_tac lhs_flip_use_env)
     apply (rule_tac lhs_unroll_dcl_use_env)
     apply (rule_tac lhs_unroll_dcl_use_env)
     apply (rule_tac diff_leq_use_env)
     apply (rule_tac lhs_fold_dcl_use_env)
     apply (rule_tac lhs_flip_use_env)
     apply (simp)
    apply (rule_tac comp_leq_use_env2)
    apply (rule_tac infl_leq_use_env)
     apply (rule_tac r_sb="diff_use_env r_s1 (comp_use_env (req_use_env x1a tau) r_ex)" in trans_leq_use_env)
      apply (rule_tac dist_diff_leq_use_env_gen)
       apply (rule_tac id_leq_use_env)
      apply (rule_tac self_comp_leq_use_env2)
     apply (simp_all)
    (* lam case. prelim: this inequality is used twice *)
   apply (cut_tac r_x="rxa" and r_s="rx" and r_ex="infl_use_env r_s1 r_s2" in st_diff_comp_leq_use_env)
    apply (rule_tac r_sb="diff_use_env rxa r_ex" in trans_leq_use_env)
     apply (simp)
    apply (rule_tac dist_diff_leq_use_env_cut)
     apply (rule_tac id_leq_use_env)
    apply (rule_tac infl_leq_use_env)
     apply (simp_all)
    (* - existentials *)
   apply (rule_tac x="rxa" in exI)
   apply (auto)
   apply (rule_tac x="empty_use_env" in exI)
   apply (auto)
      apply (rule_tac rhs_weak_leq_use_env)
       apply (simp add: weak_use_env_def)
       apply (simp add: empty_use_env_def)
      apply (rule_tac id_leq_use_env)
     apply (rule_tac id_leq_use_env)
    apply (rule_tac leq_empty_use_env)
   apply (rule_tac diff_leq_use_env)
   apply (simp)
    (* app case. first we prove that t is not primitive *)
  apply (simp add: app_req_def)
  apply (case_tac e1)
       apply (auto)
  apply (case_tac x1)
               apply (auto)
  apply (simp add: pure_fun_def)
  apply (auto)
  apply (case_tac "prim_type t")
   apply (case_tac t)
         apply (auto)
    (* - proof for e1 *)
  apply (rule_tac x="comp_use_env rx (infl_use_env r_s1 r_s2)" in exI)
  apply (auto)
   apply (rule_tac id_leq_use_env)
  apply (rule_tac x="empty_use_env" in exI)
  apply (auto)
   apply (rule_tac leq_empty_use_env)
    (* - proof for e2. we must know that it's a lambda rather than inducting, so we know rx2 is non-affine *)
  apply (case_tac e2)
       apply (auto)
    (* - prelim: this inequality is used several times in the remainder of the proof *)
  apply (cut_tac r_x="rxa" and r_s="rx" and r_ex="infl_use_env r_s1 r_s2" in st_diff_comp_leq_use_env)
   apply (rule_tac r_sb="diff_use_env (comp_use_env rx1 rx2) (comp_use_env (comp_use_env rx1 rx2) r_ex)" in trans_leq_use_env)
    apply (simp)
   apply (rule_tac r_sb="diff_use_env (diff_use_env rxa r_exa) (infl_use_env r_s1 r_s2)" in trans_leq_use_env)
    apply (rule_tac dist_diff_leq_use_env_cut)
     apply (rule_tac comp_leq_use_env2)
     apply (simp)
    apply (rule_tac infl_leq_use_env)
     apply (rule_tac r_sb="diff_use_env r_s3 (comp_use_env (comp_use_env rx1 rx2) r_ex)" in trans_leq_use_env)
      apply (rule_tac dist_diff_leq_use_env)
      apply (rule_tac r_sb="diff_use_env r_s2a r_exa" in trans_leq_use_env)
       apply (rule_tac diff_leq_use_env)
       apply (simp_all)
    apply (rule_tac dist_comp_leq_use_env)
     apply (rule_tac r_sb="r_s3" in trans_leq_use_env)
      apply (rule_tac r_sb="diff_use_env r_s2a r_exa" in trans_leq_use_env)
       apply (rule_tac diff_leq_use_env)
       apply (simp_all)
   apply (rule_tac rhs_diff_leq_use_env)
   apply (rule_tac dist_diff_leq_use_env_cut)
    apply (rule_tac id_leq_use_env)
   apply (rule_tac infl_leq_use_env)
    apply (rule_tac r_sb="diff_use_env r_s2a r_exa" in trans_leq_use_env)
     apply (rule_tac dist_diff_leq_use_env)
     apply (simp)
    apply (rule_tac r_sb="diff_use_env r_s3 (comp_use_env (comp_use_env rx1 rx2) r_ex)" in trans_leq_use_env)
     apply (rule_tac diff_leq_use_env)
     apply (simp_all)
   apply (rule_tac r_sb="r_s2a" in trans_leq_use_env)
    apply (simp_all)
    (* - completing the proof for e2 *)
  apply (rule_tac x="rxa" in exI)
  apply (rule_tac x="comp_use_env rx (infl_use_env r_s1 r_s2)" in exI)
  apply (auto)
   apply (rule_tac x="rxa" in exI)
   apply (auto)
   apply (rule_tac x="empty_use_env" in exI)
   apply (auto)
      apply (rule_tac rhs_weak_leq_use_env)
       apply (simp add: weak_use_env_def)
       apply (simp add: empty_use_env_def)
      apply (rule_tac id_leq_use_env)
    apply (rule_tac leq_empty_use_env)
   apply (rule_tac self_diff_leq_use_env)
    (* - end permissions bound *)
  apply (case_tac "\<not> weak_use_env empty_use_env")
   apply (simp add: weak_use_env_def)
   apply (simp add: empty_use_env_def)
  apply (rule_tac x="empty_use_env" in exI)
  apply (auto)
        apply (rule_tac rhs_weak_leq_use_env)
         apply (rule_tac dist_weak_comp_use_env)
          apply (rule_tac dist_weak_comp_use_env)
           apply (simp_all)
         apply (simp add: aff_use_env_def)
        apply (rule_tac id_leq_use_env)
    (* - affinity *)
       apply (simp add: aff_use_env_def)
       apply (simp add: weak_use_env_def)
    (* - requirements containment *)
      apply (rule_tac dist_comp_leq_use_env)
       apply (rule_tac leq_empty_use_env)
      apply (simp)
    (* - disjointness *)
    apply (rule_tac disj_empty_use_env2)
    (* - in-between bound *)
    apply (rule_tac id_leq_use_env)
    (* - subtracter containment *)
   apply (rule_tac leq_empty_use_env)
    (* - requirements bound *)
  apply (rule_tac r_sb="rxa" in trans_leq_use_env)
   apply (simp)
  apply (rule_tac diff_leq_use_env)
  apply (rule_tac dist_comp_leq_use_env)
   apply (rule_tac leq_empty_use_env)
  apply (rule_tac id_leq_use_env)
  done
    
lemma lhs_infl_leq_use_env: "\<lbrakk> leq_use_env r_x r_s \<rbrakk> \<Longrightarrow> leq_use_env (infl_use_env r_x r_ex) r_s"    
  apply (simp add: leq_use_env_def)
  apply (simp add: infl_use_env_def)
  apply (auto)
  apply (erule_tac x="x" in allE)
  apply (case_tac "r_s x")
    apply (auto)
  done
  
lemma infl_full_sexp_wp: "\<lbrakk> well_typed env r_s1 e tau r_s2 rx; is_sexp e \<rbrakk> \<Longrightarrow> well_typed env r_s1 e tau r_s1 (comp_use_env rx (infl_use_env r_s1 r_s2))"    
  apply (rule_tac t="well_typed env r_s1 e tau r_s1 (comp_use_env rx (infl_use_env r_s1 r_s2))" and
        s="well_typed env (comp_use_env (comp_use_env rx (infl_use_env r_s1 r_s2)) (diff_use_env r_s1 (comp_use_env rx (infl_use_env r_s1 r_s2)))) e tau
          (comp_use_env (comp_use_env rx (infl_use_env r_s1 r_s2)) (diff_use_env r_s1 (comp_use_env rx (infl_use_env r_s1 r_s2))))
          (comp_use_env rx (infl_use_env r_s1 r_s2))" in subst)
   apply (cut_tac r_x="comp_use_env rx (infl_use_env r_s1 r_s2)" and r_s="r_s1" in msum_diff_comp_use_env)
    apply (rule_tac dist_comp_leq_use_env)
     apply (rule_tac r_sb="r_s2" in trans_leq_use_env)
      apply (rule_tac well_typed_perm_leq)
      apply (auto)
    apply (rule_tac well_typed_perm_leqx)
    apply (auto)
   apply (rule_tac lhs_infl_leq_use_env)
   apply (rule_tac id_leq_use_env)
  apply (rule_tac well_typed_comp_perms_gen)
   apply (rule_tac infl_sexp_wp)
    apply (auto)
  apply (rule_tac mini_disj_diff_use_env)
  done
    
    
    (*
lemma pre_sexp_wp: "\<lbrakk> well_typed env r_s1 e tau r_s2 rx; is_sexp e \<rbrakk> \<Longrightarrow> (\<exists> rx'. well_typed env r_s1 e tau r_s1 rx' \<and> leq_use_env rx rx')"  
  apply (induct e arbitrary: env r_s1 tau r_s2 rx)
       apply (auto)
    (* const + op cases *)
      apply (rule_tac id_leq_use_env)
     apply (rule_tac id_leq_use_env)
    (* var case *)
    apply (rule_tac x="comp_use_env (req_use_env x1a tau) rx" in exI)
    apply (auto)
     apply (rule_tac x="empty_use_env" in exI)
     apply (auto)
        apply (rule_tac rhs_weak_leq_use_env)
         apply (rule_tac dist_weak_comp_use_env)
          apply (simp add: weak_use_env_def)
          apply (simp add: req_use_env_def)
          apply (simp add: one_use_env_def)
          apply (simp add: start_req_perm_def)
          apply (simp add: aff_fun_ty_def)
          apply (auto)
          apply (case_tac tau)
                apply (auto)
         apply (simp add: weak_use_env_def)
         apply (simp add: empty_use_env_def)
        apply (rule_tac id_leq_use_env)
       apply (rule_tac dist_comp_leq_use_env)
        apply (simp)
       apply (rule_tac r_sb="diff_use_env r_s1 (comp_use_env (req_use_env x1a tau) r_ex)" in trans_leq_use_env)
        apply (rule_tac self_diff_leq_use_env)
       apply (rule_tac r_sb="r_s2" in trans_leq_use_env)
        apply (auto)
      apply (rule_tac leq_empty_use_env)
     apply (rule_tac diff_leq_use_env)
     apply (rule_tac self_comp_leq_use_env1)
    apply (rule_tac self_comp_leq_use_env2)
    (*  *)
   apply (rule_tac x="comp_use_env rxa rx" in exI)
   apply (auto)
    apply (rule_tac x="rxa" in exI)
    apply (auto)
    apply (rule_tac x="empty_use_env" in exI)
    apply (auto)
       apply (rule_tac rhs_weak_leq_use_env)
        apply (simp add: weak_use_env_def)
        apply (simp add: empty_use_env_def)
       apply (rule_tac id_leq_use_env)
      apply (rule_tac dist_comp_leq_use_env)
       apply (simp)
      apply (rule_tac r_sb="diff_use_env r_s1 r_ex" in trans_leq_use_env)
       apply (rule_tac self_diff_leq_use_env)
      apply (rule_tac r_sb="r_s2" in trans_leq_use_env)
       apply (auto)
     apply (rule_tac leq_empty_use_env)
    apply (rule_tac diff_leq_use_env)
    apply (rule_tac self_comp_leq_use_env1)
   apply (rule_tac self_comp_leq_use_env2)
    (* *)
  apply (case_tac e2)
       apply (auto)
  apply (rule_tac x="comp_use_env rxa rx" in exI)
  apply (auto)
   apply (rule_tac x="FunTy t1a t2 ra aa" in exI)
   apply (rule_tac x="r" in exI)
   apply (rule_tac x="a" in exI)
   apply (rule_tac x="r_s1" in exI)
   apply (rule_tac x="empty_use_env" in exI)  
   apply (auto)
    apply (case_tac e1)
         apply (auto)
    apply (rule_tac leq_empty_use_env)
   apply (rule_tac x="rxa" in exI)
   apply (rule_tac x="r_s1" in exI)
   apply (auto)
    apply (rule_tac x="rxa" in exI)
    apply (auto)
     apply (rule_tac r_sb="r_s2a" in trans_leq_use_env)
      apply (auto)
     apply (rule_tac well_typed_perm_leq)
     apply (auto)
    apply (rule_tac x="empty_use_env" in exI)
    apply (auto)
       apply (rule_tac rhs_weak_leq_use_env)
        apply (simp add: weak_use_env_def)
        apply (simp add: empty_use_env_def)
       apply (rule_tac id_leq_use_env)
      apply (rule_tac r_sb="r_s2a" in trans_leq_use_env)
       apply (rule_tac well_typed_perm_leq)
       apply (auto)
     apply (rule_tac leq_empty_use_env)
    apply (rule_tac self_diff_leq_use_env)
   apply (case_tac "\<not> weak_use_env empty_use_env")
    apply (simp add: weak_use_env_def)
    apply (simp add: empty_use_env_def)
   apply (auto)
   apply (case_tac e1)
        apply (auto)
   apply (case_tac x1)
                apply (auto)
   apply (rule_tac x="empty_use_env" in exI)
   apply (auto)
         apply (rule_tac rhs_weak_leq_use_env)
          apply (rule_tac dist_weak_comp_use_env)
           apply (rule_tac dist_weak_comp_use_env)
            apply (auto)
          apply (simp add: pure_fun_def)
          apply (auto)
          apply (simp add: aff_use_env_def)
         apply (rule_tac id_leq_use_env)
        apply (simp add: pure_fun_def)
        apply (auto)
        apply (simp add: aff_use_env_def)
        apply (simp add: weak_use_env_def)
       apply (rule_tac dist_comp_leq_use_env)
        apply (rule_tac leq_empty_use_env)
       apply (simp add: pure_fun_def)
       apply (rule_tac r_sb="r_s2a" in trans_leq_use_env)
        apply (auto)
      apply (rule_tac disj_empty_use_env2)
     apply (rule_tac r_sb="r_s2a" in trans_leq_use_env)
      apply (simp)
     apply (rule_tac dist_comp_leq_use_env)
      apply (auto)
     apply (rule_tac r_sb="diff_use_env r_s3 (comp_use_env (comp_use_env rx1 (lift_use_env rx2 r)) r_ex)" in trans_leq_use_env)
      apply (rule_tac diff_leq_use_env)
      apply (rule_tac r_sb="diff_use_env r_s2a r_exa" in trans_leq_use_env)
       apply (rule_tac self_diff_leq_use_env)
      apply (auto)
     apply (rule_tac r_sb="r_s2" in trans_leq_use_env)
      apply (auto)
    apply (rule_tac leq_empty_use_env)
   apply (simp add: app_req_def)
   apply (auto)
    apply (rule_tac leq_empty_use_env)
    apply (rule_tac diff_leq_use_env)
   apply (rule_tac dist_comp_leq_use_env)
    apply (rule_tac leq_empty_use_env)
   apply  (rule_tac self_comp_leq_use_env1)
  apply (rule_tac self_comp_leq_use_env2)
  done*)    
  
end