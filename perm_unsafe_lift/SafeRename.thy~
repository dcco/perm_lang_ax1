theory RenameLemma
  imports WTLemma SubstExp
begin
  

definition rename_use_env where
  "rename_use_env r_s x y = (add_use_env (rem_use_env r_s x) y (r_s x))"  
  
lemma rename_leq_use_env: "\<lbrakk> leq_use_env r_x r_s \<rbrakk> \<Longrightarrow>
  leq_use_env (rename_use_env r_x x y) (rename_use_env r_s x y)"
  apply (simp add: leq_use_env_def)
  apply (auto)
  apply (simp add: rename_use_env_def)
  apply (simp add: add_use_env_def)
  apply (simp add: rem_use_env_def)
  done
    
lemma rename_req_use_env: "req_use_env y tau = rename_use_env (req_use_env x tau) x y"
  apply (case_tac "\<forall> x'. req_use_env y tau x' = rename_use_env (req_use_env x tau) x y x'")
   apply (auto)
  apply (simp add: req_use_env_def)
  apply (simp add: one_use_env_def)
  apply (simp add: rename_use_env_def)
  apply (simp add: add_use_env_def)
  apply (case_tac "y = x'")
   apply (auto)
  apply (simp add: rem_use_env_def)
  apply (case_tac "x = x'")
   apply (auto)
  done
 
lemma rename_req_use_env2: "\<lbrakk> z \<noteq> x ; z \<noteq> y\<rbrakk> \<Longrightarrow> req_use_env z tau = rename_use_env (req_use_env z tau) x y"    
  apply (case_tac "\<forall> x'. req_use_env z tau x' = rename_use_env (req_use_env z tau) x y x'")
   apply (auto)
  apply (simp add: req_use_env_def)
  apply (simp add: one_use_env_def)
  apply (simp add: rename_use_env_def)
  apply (simp add: add_use_env_def)
  apply (case_tac "z = x'")
   apply (auto)
   apply (simp add: rem_use_env_def)
  apply (case_tac "y = x'")
   apply (auto)
  apply (simp add: rem_use_env_def)
  apply (case_tac "x = x'")
   apply (auto)
  done
    
lemma rename_add_use_env: "add_use_env (rename_use_env r_s x y) y r = rename_use_env (add_use_env r_s x r) x y"    
  apply (case_tac "\<forall> x'. add_use_env (rename_use_env r_s x y) y r x' = rename_use_env (add_use_env r_s x r) x y x'")
   apply (auto)
  apply (simp add: rename_use_env_def)
  apply (simp add: add_use_env_def)  
  apply (case_tac "y = x'")
   apply (auto)
  apply (simp add: rem_use_env_def)
  apply (case_tac "x = x'")
   apply (auto)
  done

lemma rename_add_use_env2: "\<lbrakk> z \<noteq> x; z \<noteq> y \<rbrakk> \<Longrightarrow> add_use_env (rename_use_env r_s x y) z r = rename_use_env (add_use_env r_s z r) x y"    
  apply (case_tac "\<forall> x'. add_use_env (rename_use_env r_s x y) z r x' = rename_use_env (add_use_env r_s z r) x y x'")    
   apply (auto)
  apply (simp add: rename_use_env_def)
  apply (simp add: add_use_env_def)  
  apply (case_tac "y = x'")
   apply (auto)
  apply (simp add: rem_use_env_def)
  apply (case_tac "z = x'")
   apply (auto)
  apply (simp add: rem_use_env_def)
  apply (case_tac "x = x'")
   apply (auto)
  done
 
lemma rename_add_use_env3: "\<lbrakk> r_s x = NoPerm \<rbrakk> \<Longrightarrow> add_use_env r_s y r = rename_use_env (add_use_env r_s x r) x y"
  apply (case_tac "\<forall> x'. add_use_env r_s y r x' = rename_use_env (add_use_env r_s x r) x y x'")
   apply (auto)
  apply (simp add: rename_use_env_def)
  apply (simp add: add_use_env_def)
  apply (case_tac "y = x'")
   apply (auto)
  apply (simp add: rem_use_env_def)
  apply (case_tac "x = x'")
   apply (auto)
  done
  
lemma rename_comp_use_env: "comp_use_env (rename_use_env r_x x y) (rename_use_env r_s x y) = rename_use_env (comp_use_env r_x r_s) x y"    
  apply (case_tac "\<forall> x'. comp_use_env (rename_use_env r_x x y) (rename_use_env r_s x y) x' = rename_use_env (comp_use_env r_x r_s) x y x'")
   apply (auto)
  apply (simp add: comp_use_env_def)
  apply (simp add: rename_use_env_def)
  apply (simp add: add_use_env_def)
  apply (case_tac "y = x'")
   apply (auto)
  apply (simp add: rem_use_env_def)
  apply (case_tac "x = x'")
   apply (auto)
  done
    
lemma rename_diff_use_env: "diff_use_env (rename_use_env r_x x y) (rename_use_env r_s x y) = rename_use_env (diff_use_env r_x r_s) x y"    
  apply (case_tac "\<forall> x'. diff_use_env (rename_use_env r_x x y) (rename_use_env r_s x y) x' = rename_use_env (diff_use_env r_x r_s) x y x'")
  apply (auto)
  apply (simp add: diff_use_env_def)
  apply (simp add: minus_use_env_def)
  apply (simp add: neg_use_env_def)
  apply (simp add: rename_use_env_def)
  apply (simp add: add_use_env_def)
  apply (case_tac "y = x'")
   apply (auto)
  apply (simp add: rem_use_env_def)
  apply (case_tac "x = x'")
   apply (auto)
  done
    
lemma rename_lift_use_env: "lift_use_env (rename_use_env r_s x y) r = rename_use_env (lift_use_env r_s r) x y"  
  apply (case_tac "\<forall> x'. lift_use_env (rename_use_env r_s x y) r x' = rename_use_env (lift_use_env r_s r) x y x'")
   apply (auto)
  apply (case_tac r)
    apply (auto)
  apply (simp add: rename_use_env_def)
  apply (simp add: add_use_env_def)
  apply (case_tac "y = x'")
   apply (auto)
   apply (simp add: rem_use_env_def)
   apply (case_tac "x = x'")
    apply (auto)
  apply (simp add: rem_use_env_def)
  apply (case_tac "x = x'")
   apply (auto)
  done
  
lemma aff_rename_use_env: "\<lbrakk> aff_use_env r_s a \<rbrakk> \<Longrightarrow> aff_use_env (rename_use_env r_s x y) a"    
  apply (simp add: aff_use_env_def)
  apply (auto)
  apply (simp add: rename_use_env_def)
  apply (simp add: add_use_env_def)
  apply (simp add: weak_use_env_def)
  apply (auto)
  apply (erule_tac x="xa" in allE)  
  apply (simp add: rem_use_env_def)
  apply (case_tac "x = xa")
   apply (auto)
  done
  
lemma safe_lift_rename_use_env: "\<lbrakk> safe_use_lift r_s r \<rbrakk> \<Longrightarrow> safe_use_lift (rename_use_env r_s x y) r"
  apply (simp add: rename_use_env_def)
  apply (simp add: add_use_env_def)
  apply (case_tac r)
    apply (auto)
  apply (erule_tac x="xa" in allE)
  apply (simp add: rem_use_env_def)
  apply (case_tac "x = xa")
   apply (auto)
  done

lemma disj_rename_use_env: "\<lbrakk> disj_use_env r_x r_s \<rbrakk> \<Longrightarrow> disj_use_env (rename_use_env r_x x y) (rename_use_env r_s x y)"
  apply (simp add: disj_use_env_def)
  apply (simp add: mini_disj_use_env_def)
  apply (auto)
   apply (simp add: rename_use_env_def)
   apply (simp add: add_use_env_def)
   apply (auto)
   apply (simp add: rem_use_env_def)
   apply (auto)
  apply (simp add: rename_use_env_def)
  apply (simp add: add_use_env_def)
  apply (auto)
  apply (simp add: rem_use_env_def)
  apply (auto)
  done
    
lemma alpha_rename_type_preserve: "\<lbrakk> well_typed (add_env env x t) r_s1 e tau r_s2 rx; (*env x = None;*) y \<notin> free_vars e; y \<notin> lam_vars e \<rbrakk> \<Longrightarrow>
  well_typed (add_env env y t) (rename_use_env r_s1 x y) (deep_alpha_rename e x y) tau (rename_use_env r_s2 x y) (rename_use_env rx x y)"
  apply (induct e arbitrary: env tau t r_s1 r_s2 rx)
   apply (auto)    
    (* const + op cases *)
               apply (rule_tac x="x" in rename_leq_use_env)
                 apply (simp_all)
              apply (rule_tac x="x" in rename_leq_use_env)
                apply (simp_all)
             apply (rule_tac x="x" in rename_leq_use_env)
               apply (simp_all)
            apply (rule_tac x="x" in rename_leq_use_env)
              apply (simp_all)
    (* var case p1. *)
           apply (simp add: add_env_def)
          apply (case_tac "\<not> leq_perm (start_req_perm tau) (r_s1 x)")
           apply (cut_tac r_x="req_use_env x tau" and r_s="r_s1" and x="x" in spec_leq_perm)
            apply (simp)
           apply (simp add: req_use_env_def)
           apply (simp add: one_use_env_def)
          apply (simp add: leq_use_env_def)
          apply (simp add: req_use_env_def)
          apply (simp add: one_use_env_def)
          apply (simp add: rename_use_env_def)
          apply (simp add: add_use_env_def)
         apply (cut_tac x="x" and y="y" and tau="tau" in rename_req_use_env)
         apply (simp)
         apply (case_tac "\<not> comp_use_env (req_use_env y tau) (rename_use_env r_ex x y) = rename_use_env (comp_use_env (req_use_env x tau) r_ex) x y")
          apply (cut_tac r_x="req_use_env x tau" and r_s="r_ex" and x="x" and y="y" in rename_comp_use_env)
          apply (simp)
         apply (rule_tac x="rename_use_env r_ex x y" in exI)
         apply (auto)
            apply (cut_tac r_x="r_s1" and r_s="comp_use_env (req_use_env x tau) r_ex" and x="x" and y="y" in rename_diff_use_env)
            apply (simp)
            apply (rule_tac rename_leq_use_env)
            apply (simp)
           apply (rule_tac rename_leq_use_env)
           apply (simp)
           apply (rule_tac rename_leq_use_env)
          apply (simp)
          apply (cut_tac r_x="req_use_env x tau" and r_s="comp_use_env (req_use_env x tau) r_ex" and x="x" and y="y" in rename_diff_use_env)
          apply (simp)
         apply (rule_tac rename_leq_use_env)
         apply (simp)
        apply (simp add: add_env_def)
    (* var case p2. *)
       apply (case_tac "\<not>  leq_use_env (req_use_env x1a tau) (rename_use_env r_s1 x y) =  leq_use_env (rename_use_env (req_use_env x1a tau) x y) (rename_use_env r_s1 x y)")
        apply (cut_tac z="x1a" and x="x" and y="y" and tau="tau" in rename_req_use_env2)
          apply (simp_all)
       apply (rule_tac rename_leq_use_env)
       apply (simp)
      apply (case_tac "\<not> rename_use_env (req_use_env x1a tau) x y = req_use_env x1a tau")
       apply (cut_tac z="x1a" and x="x" and y="y" and tau="tau" in rename_req_use_env2)
         apply (simp_all)
      apply (cut_tac r_x="req_use_env x1a tau" and r_s="r_ex" and x="x" and y="y" in rename_comp_use_env)
      apply (simp_all)
      apply (rule_tac x="rename_use_env r_ex x y" in exI)
      apply (auto)
         apply (cut_tac r_x="r_s1" and r_s="comp_use_env (req_use_env x1a tau) r_ex" and x="x" and y="y" in rename_diff_use_env)
         apply (simp_all)
         apply (rule_tac rename_leq_use_env)
         apply (simp)
        apply (rule_tac rename_leq_use_env)
        apply (simp)
       apply (rule_tac rename_leq_use_env)
       apply (simp)
      apply (cut_tac r_x="req_use_env x1a tau" and r_s="comp_use_env (req_use_env x1a tau) r_ex" and x="x" and y="y" in rename_diff_use_env)
      apply (simp_all)
      apply (rule_tac rename_leq_use_env)
      apply (simp)
    (* if case *)
     apply (rule_tac x="rename_use_env rx' x y" in exI)
     apply (rule_tac x="rename_use_env r_s2a x y" in exI)
     apply (auto)
     apply (rule_tac x="rename_use_env rx1 x y" in exI)
     apply (auto)
     apply (rule_tac x="rename_use_env rx2 x y" in exI)
     apply (auto)
     apply (cut_tac r_x="rx1" and r_s="rx2" and x="x" and y="y" in rename_comp_use_env)
     apply (auto)
    (* lam case p1. *)
    apply (rule_tac x="rename_use_env rxa x y" in exI)
    apply (auto)
       apply (rule_tac x="rename_use_env r_end x y" in exI)
       apply (rule_tac x="rename_use_env r_s' x y" in exI)
       apply (cut_tac env="env" and x="x" and t="t" and t'="t1" in double_add_env)
       apply (cut_tac env="env" and x="y" and t="t" and t'="t1" in double_add_env)
       apply (cut_tac r_s="rxa" and x="x" and y="y" and r="r" in rename_add_use_env)
       apply (simp)
      apply (rule_tac aff_rename_use_env)
      apply (simp)
     apply (rule_tac rename_leq_use_env)
     apply (simp)
    apply (rule_tac x="rename_use_env r_ex x y" in exI)
    apply (auto)
       apply (cut_tac r_x="r_s1" and r_s="r_ex" and x="x" and y="y" in rename_diff_use_env)
       apply (simp)
       apply (rule_tac rename_leq_use_env)
       apply (simp)
      apply (rule_tac rename_leq_use_env)
      apply (simp)
     apply (rule_tac rename_leq_use_env)
     apply (simp)
    apply (cut_tac r_x="rxa" and r_s="r_ex" and x="x" and y="y" in rename_diff_use_env)
    apply (simp)
    apply (rule_tac rename_leq_use_env)
    apply (simp)
    (* lam case p2. *)
   apply (rule_tac x="rename_use_env rxa x y" in exI)
   apply (auto)
      apply (rule_tac x="rename_use_env r_end x y" in exI)
      apply (rule_tac x="rename_use_env r_s' x y" in exI)
      apply (cut_tac env="env" and x="x1a" and y="x" and t="t" and t'="t1" in almost_comm_add_env)
       apply (simp_all)
      apply (cut_tac env="env" and x="x1a" and y="y" and t="t" and t'="t1" in almost_comm_add_env)
       apply (simp_all)
      apply (cut_tac r_s="rxa" and x="x" and y="y" and z="x1a" and r="r" in rename_add_use_env2)
        apply (simp_all)
     apply (rule_tac aff_rename_use_env)
     apply (simp)
    apply (rule_tac rename_leq_use_env)
    apply (simp)
   apply (rule_tac x="rename_use_env r_ex x y" in exI)
   apply (auto)
      apply (cut_tac r_x="r_s1" and r_s="r_ex" and x="x" and y="y" in rename_diff_use_env)
      apply (simp)
      apply (rule_tac rename_leq_use_env)
      apply (simp)
     apply (rule_tac rename_leq_use_env)
     apply (simp)
    apply (rule_tac rename_leq_use_env)
    apply (simp)
   apply (cut_tac r_x="rxa" and r_s="r_ex" and x="x" and y="y" in rename_diff_use_env)
   apply (simp)
   apply (rule_tac rename_leq_use_env)
   apply (simp)
    (* app case *)
  apply (rule_tac x="t1" in exI)
  apply (rule_tac x="r" in exI)
  apply (rule_tac x="a" in exI)
  apply (rule_tac x="rename_use_env r_s2a x y" in exI)
  apply (rule_tac x="rename_use_env rx1 x y" in exI)
  apply (auto)
  apply (rule_tac x="rename_use_env rx2 x y" in exI)
  apply (rule_tac x="rename_use_env r_s3 x y" in exI)
  apply (auto)
  apply (cut_tac r_s="rx2" and x="x" and y="y" and r="r" in rename_lift_use_env)
  apply (simp)
  apply (cut_tac r_x="rx1" and r_s="lift_use_env rx2 r" and x="x" and y="y" in rename_comp_use_env)
  apply (cut_tac r_x="comp_use_env rx1 (lift_use_env rx2 r)" and r_s="r_ex" and x="x" and y="y" in rename_comp_use_env)
  apply (rule_tac x="rename_use_env r_ex x y" in exI)
  apply (auto)
        apply (cut_tac r_x="r_s3" and r_s="comp_use_env (comp_use_env rx1 (lift_use_env rx2 r)) r_ex" and x="x" and y="y" in rename_diff_use_env)
        apply (simp)
        apply (rule_tac rename_leq_use_env)
        apply (simp)
       apply (rule_tac safe_lift_rename_use_env)
       apply (simp)
      apply (rule_tac rename_leq_use_env)
      apply (simp)
     apply (rule_tac disj_rename_use_env)
     apply (simp)
    apply (rule_tac rename_leq_use_env)
    apply (simp)
   apply (rule_tac rename_leq_use_env)
   apply (simp)
  apply (simp add: app_req_def)
  apply (auto)
   apply (rule_tac leq_empty_use_env)
  apply (cut_tac r_x="rx1" and r_s="rx2" and x="x" and y="y" in rename_comp_use_env)
  apply (simp)
  apply (cut_tac r_x="comp_use_env rx1 rx2" and r_s="comp_use_env (comp_use_env rx1 (lift_use_env rx2 r)) r_ex" and x="x" and y="y" in rename_diff_use_env)
  apply (simp)
  apply (rule_tac rename_leq_use_env)
  apply (simp)
  done  
    
lemma lam_var_remove_type_preserve: "\<lbrakk> well_typed env r_s1 e tau r_s2 rx; y \<notin> free_vars e; y \<notin> lam_vars e \<rbrakk> \<Longrightarrow>
  well_typed env r_s1 (lam_var_remove e x y) tau r_s2 rx"
  apply (induct e arbitrary: env tau r_s1 r_s2 rx)
       apply (auto)
    (* if case *)
     apply (rule_tac x="rx'" in exI)
     apply (rule_tac x="r_s2a" in exI)
     apply (auto)
     apply (rule_tac x="rx1" in exI)
     apply (auto)
     apply (rule_tac x="rx2" in exI)
     apply (auto)
    (* lam case p1. *)
    apply (rule_tac x="rxa" in exI)
    apply (auto)
    apply (rule_tac x="rename_use_env r_end x y" in exI)
    apply (rule_tac x="rename_use_env r_s' x y" in exI)
    apply (rule_tac ?r_s1.0="rem_use_env (add_use_env rxa y r) x" in well_typed_incr_start_perm)
     apply (cut_tac r_s="rxa" and x="y" and y="x" and r="r" in almost_comm_rem_add_use_env)
      apply (simp_all)
    apply (case_tac "\<not> add_use_env (rem_use_env rxa x) y r = rename_use_env (add_use_env rxa x r) x y")
     apply (case_tac "\<not> (\<forall> x'. add_use_env (rem_use_env rxa x) y r x' = rename_use_env (add_use_env rxa x r) x y x')")
     apply (auto)
     apply (simp add: rename_use_env_def)
     apply (simp add: add_use_env_def)
     apply (case_tac "y = x'")
      apply (auto)
     apply (simp add: rem_use_env_def)
     apply (case_tac "x = x'")
       apply (auto)
     apply (rule_tac alpha_rename_type_preserve)
       apply (simp_all)
    apply (rule_tac self_rem_leq_use_env)
    (* lam case p2. *)
   apply (rule_tac x="rxa" in exI)
   apply (auto)
   apply (rule_tac x="r_end" in exI)
   apply (rule_tac x="r_s'" in exI)
   apply (auto)
    (* app case *)
  apply (rule_tac x="t1" in exI)
  apply (rule_tac x="r" in exI)
  apply (rule_tac x="a" in exI)
  apply (rule_tac x="r_s2a" in exI)
  apply (rule_tac x="rx1" in exI)
  apply (auto)
  apply (rule_tac x="rx2" in exI)
  apply (rule_tac x="r_s3" in exI)
  apply (auto)
  done    

lemma alpha_rename_free_var_id: "\<lbrakk> x \<noteq> y \<rbrakk> \<Longrightarrow> x \<notin> free_vars (deep_alpha_rename e x y)"
  apply (induct e)
       apply (auto)
  done       

lemma alpha_rename_free_var_none: "\<lbrakk> a \<notin> free_vars e; a \<noteq> y \<rbrakk> \<Longrightarrow> a \<notin> free_vars (deep_alpha_rename e x y)"     
  apply (induction e)
       apply (auto)
  apply (cut_tac e="e" and x="a" and y="y" in alpha_rename_free_var_id)
   apply (auto)
  done
    
lemma alpha_rename_lam_var_none: "\<lbrakk> a \<notin> lam_vars e; a \<noteq> y \<rbrakk> \<Longrightarrow> a \<notin> lam_vars (deep_alpha_rename e x y)"  
  apply (induct e)
       apply (auto)
  done
  
lemma lam_var_remove_free_var_none: "\<lbrakk> x \<notin> free_vars e \<rbrakk> \<Longrightarrow> x \<notin> free_vars (lam_var_remove e a b)"    
  apply (induct e)
       apply (auto)
   apply (case_tac "x \<noteq> b")
    apply (cut_tac e="e" and a="x" and x="a" and y="b" in alpha_rename_free_var_none)
      apply (auto)
  apply (case_tac "x \<noteq> b")
   apply (cut_tac e="e" and x="x" and y="b" in alpha_rename_free_var_id)
    apply (auto)
  done

lemma lam_var_remove_lam_var_none: "\<lbrakk> x \<notin> lam_vars e; x \<noteq> b \<rbrakk> \<Longrightarrow> x \<notin> lam_vars (lam_var_remove e a b)"  
  apply (induct e)  
       apply (auto)
  apply (cut_tac a="x" and e="e" and x="a" and y="b" in alpha_rename_lam_var_none)
    apply (auto)
  done
    
lemma lam_var_list_remove_type_preserve: "\<lbrakk> well_typed env r_s1 e tau r_s2 rx; unique_post_vars vl;
  post_vars vl \<inter> (free_vars e \<union> lam_vars e) = {} \<rbrakk> \<Longrightarrow> well_typed env r_s1 (lam_var_list_remove e vl) tau r_s2 rx"
  apply (induct vl arbitrary: e)
   apply (auto)
  apply (cut_tac env="env" and ?r_s1.0="r_s1" and e="e" and tau="tau" and ?r_s2.0="r_s2" and rx="rx" and x="a" and y="b" in lam_var_remove_type_preserve)
     apply (auto)
  apply (case_tac "\<not> post_vars vl \<inter> (free_vars (lam_var_remove e a b) \<union> lam_vars (lam_var_remove e a b)) = {}")
   apply (auto)
   apply (case_tac "x \<in> free_vars e")
    apply (auto)
   apply (cut_tac e="e" and x="x" and a="a" and b="b" in lam_var_remove_free_var_none)
    apply (auto)
  apply (case_tac "x \<in> lam_vars e")
   apply (auto)
  apply (cut_tac e="e" and x="x" and a="a" and b="b" in lam_var_remove_lam_var_none)
    apply (auto)
  done      
    
end